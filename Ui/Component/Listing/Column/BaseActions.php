<?php
/**
 * NOTICE OF LICENSE
 *
 * This source file is subject to the license that is available in LICENSE file.
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to upgrade this extension to newer version in the future.
 */

namespace FjodorMaller\Base\Ui\Component\Listing\Column;

use Magento\Framework\UrlInterface;
use Magento\Framework\View\Element\UiComponentFactory;
use Magento\Framework\View\Element\UiComponent\ContextInterface;
use Magento\Ui\Component\Listing\Columns\Column;

/**
 * Class BaseActions
 */
abstract class BaseActions extends Column
{
    const PARAM_IS_VALID   = 'is_valid';

    const PARAM_SORT_ORDER = 'sort_order';

    /**
     * @var UrlInterface
     */
    protected $urlBuilder;

    /**
     * @param UrlInterface $urlBuilder
     *
     * @inheritdoc
     */
    public function __construct(
        UrlInterface $urlBuilder,
        ContextInterface $context,
        UiComponentFactory $uiComponentFactory,
        array $components = [],
        array $data = []
    ) {
        parent::__construct($context, $uiComponentFactory, $components, $data);
        $this->urlBuilder = $urlBuilder;
    }

    /**
     * @inheritdoc
     */
    public function prepareDataSource(array $dataSource)
    {
        $itemActions = $this->getItemActions();
        if (isset($dataSource[ 'data' ][ 'items' ]) && count($itemActions)) {
            uasort($itemActions, [
                $this,
                '_sortItemActions',
            ]);
            $indexField = $this->getData('config/indexField');
            foreach ($dataSource[ 'data' ][ 'items' ] as &$item) {
                if (isset($item[ $indexField ])) {
                    foreach ($itemActions as $key => $itemAction) {
                        if (!$this->canShowAction($itemAction, $item)) {
                            continue;
                        }
                        $itemAction[ 'href' ]                   = $this->urlBuilder->getUrl(
                            isset($itemAction[ 'path' ]) ? $itemAction[ 'path' ] : null,
                            [
                                $indexField => $item[ $indexField ],
                            ]
                        );
                        $item[ $this->getData('name') ][ $key ] = $itemAction;
                    }
                }
            }
        }

        return $dataSource;
    }

    /**
     * Returns true if action can be shown with given data.
     *
     * @param array $itemAction
     * @param array $item
     * @param bool  $default
     *
     * @return bool
     */
    public function canShowAction(array $itemAction, array $item, $default = true)
    {
        if (!isset($itemAction[ static::PARAM_IS_VALID ])) {
            return $default;
        }
        $callable = $itemAction[ static::PARAM_IS_VALID ];
        if (is_bool($callable)) {
            return (bool)$callable;
        }
        if (!is_callable($callable)) {
            return $default;
        }

        return $itemAction[ static::PARAM_IS_VALID ]($item);
    }

    /**
     * Returns the items actions data.
     *
     * @return array
     */
    abstract public function getItemActions();

    /**
     * Callback for sorting given data by sort parameter.
     *
     * @param array $a
     * @param array $b
     *
     * @return int
     */
    private function _sortItemActions(array $a, array $b)
    {
        if (!isset($a[ static::PARAM_SORT_ORDER ], $b[ static::PARAM_SORT_ORDER ])) {
            return 0;
        }

        return $a[ static::PARAM_SORT_ORDER ] <=> $b[ static::PARAM_SORT_ORDER ];
    }
}
