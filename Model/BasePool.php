<?php
/**
 * NOTICE OF LICENSE
 *
 * This source file is subject to the license that is available in LICENSE file.
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to upgrade this extension to newer version in the future.
 */

namespace FjodorMaller\Base\Model;

use Magento\Framework\DataObject;

/**
 * Class BasePool
 */
abstract class BasePool extends DataObject
{
    const POOL_PARAM       = 'objects';

    const POOL_SORT_METHOD = 'sortObjects';

    /**
     * Returns present objects.
     *
     * @return array
     */
    protected function getObjects()
    {
        $result = (array)$this->getData(static::POOL_PARAM);
        if (!empty($result) && method_exists($this, static::POOL_SORT_METHOD)) {
            /**
             * Sorting method should be either public or protected else an error would be thrown of magic methods
             */
            uasort($result, [
                $this,
                static::POOL_SORT_METHOD,
            ]);
        }

        return $result;
    }

    /**
     * Returns corresponding object to given name.
     *
     * @param string $name
     * @param mixed  $default
     *
     * @return mixed
     */
    protected function getObject($name, $default = false)
    {
        if ($this->hasObject($name)) {
            return $this->getData(sprintf('%s/%s', static::POOL_PARAM, $name));
        }

        return $default;
    }

    /**
     * Returns true if objects are present.
     *
     * @return bool
     */
    public function hasObjects()
    {
        return (bool)count($this->getObjects());
    }

    /**
     * Checks if corresponding object is present by given name.
     *
     * @param string $name
     *
     * @return bool
     */
    protected function hasObject($name)
    {
        return (bool)$this->getData(sprintf('%s/%s', static::POOL_PARAM, $name));
    }

    /**
     * Adds objects with given data.
     *
     * @param array $objects
     *
     * @return $this
     */
    protected function addObjects(array $objects)
    {
        foreach ($objects as $name => $object) {
            $this->addObject($name, $object);
        }

        return $this;
    }

    /**
     * Adds object with given name.
     *
     * @param string $name
     * @param mixed  $object
     *
     * @return $this
     */
    protected function addObject($name, $object)
    {
        $data          = $this->getObjects();
        $data[ $name ] = $object;
        $this->setData(static::POOL_PARAM, $data);

        return $this;
    }
}
